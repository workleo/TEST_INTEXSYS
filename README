Требуется (восстанавливаю по памяти)

в  ~/templates/product_page.phtml

Создать форму для ввода PRODUCT REVIEW
на месте <div>ADD A NEW PRODUCT REVIEW</div>
Форма должна содеражать поля 
NAME     input type="text" 
EMAIL    input type="text" 
REVIEW  textarea
и кнопку Submit

содержимое полей должно формой проверятся (например имя не пустое,цифр не содержит,
email правильной структуры,REVIEW не пустое и т.д. и т.п. )
и записываться в таблицу, которую перед этим надо создать,
связанную с таблицей products.

P.S.
По поводу таблиц и базы данных.
Все что связано с базой лежит  Core.php
Там есть метод public function resetDatabase(),
который можно вызвать через /web/reset.php
Метод создает базу данных с нуля. Т.е. сюда и пишите все изменения
в структуре базы.

Подключение к базе идет в 
public function __construct()
как
$this->database = new PDO('sqlite:/tmp/foo.db');

P.S. этот /tmp/foo.db лежит бог знает где на компьютере, но можно
поменять его (хотя бы во время отладки) на свой путь, тогда можно будет поработать
с базой каким нибудь сторонним инструментом. Например тем что лежит в папке
test/SQLiteStudio/SQLiteStudio.exe. И да, папка test к проету НЕ ОТНОСИТСЯ!

в  ~/templates/product_page.phtml
 <h2>COUNT OF PRODUCT REVIEWS IS NEEDED HERE</h2>
в этом месте вывести счетчик количества записей REVIEW относящихся к product

в  ~/templates/product_page.phtml
 <div>ADD A NEW PRODUCT REVIEW</div>
вывести все ранее введенные  REVIEWS относящихся к product (т. е. Имеется
отношение products → one To many → reviews)


в ~/templates/product.phtml
<strong>COUNT OF PRODUCT REVIEWS IS NEEDED HERE</strong>
в этом месте вывести счетчик количества записей REVIEW относящихся к product

	Кроме того,к сожалению точно не помню что, но что-то еще надо было сделать на jquery и что-то записать в файл Log. Возможно эти вещи даже связаны между собой. Например, зафиксировать создание нового  REVIEW в  Log файле с помощью обработки Submit на jquery.

=====================================

Загадки и напрямки:

1.Код проекта в основном на phtml — смесь php c html. Пример:

<head>
    <title><?php echo $response['title'] ?></title>
</head>

2. PHP 5 версии

3. Работа с базой данных через PDO. База SQLITE.

4. Пример обработки запроса к базе
public function getProducts()
    {
        $statement = $this->database->prepare('SELECT * FROM products');
        $statement->execute();
        return $statement->fetchAll();
    }
т. е. Просто готовим текст SQL запроса, в зависимости от запроса возвращаем или 
fetch() или fetchAll() или одно значение из массива ответа что-то вроде fetch()[0].


5. Структура проекта -
Запуск
web/index.php  (или) web/reset.php 
внутри них следует обращение к  (new Core())→handle();
(это такой маленький router и DBSQlConnection в одном флаконе)
внутри Core в методе handle() идет разборка полетов
или идем на страницу /templates/index.phtml  -  которая слепит списк всех товаров
в  templates/product.phtml

или если прошли через ссылку в templates/product.phtml  
<a href="<?php echo $product['url'] ?>">        
найдет в базе в таблице продукт по переданной по $_SERVER['REQUEST_URI'] 
и выйдет на require_once(__DIR__ . '/templates/product_page.phtml');
МАЛЕНЬКАЯ ТАКАЯ ДЕТАЛЬ — в таблицу  products ссылки пишутся в виде
/g-seven-br2-ballistic-rangefinder.html
т. е. Название товара + .html.  
НА ТЕСТОВОМ КОМПЬЮТЕРЕ ЭТО ВСЕ РАБОТАЛО, причем нажатие на
ссылку ВСЕГДА приводило к вызову web/index.php но на  $_SERVER['REQUEST_URI'] 
был адрес самой ссылки.

Так вот  на своем компьютере я эту схему не смог заставить работать никакими
силами. Во-первых, сами html файлы в проекте отсутствуют. Даже если их создать
то переход на них по ссылке обращение к  Core() (или к web/index.php) не происходит.
(по крайней мере у меня).

Чтобы заставить вышеописанную схему работать мне пришлось
a. Создать файлы - Название товара + .PHP    -  PHP !!!! не html и не phtml
b. Внутри каждого такого файла прописать
<?php
    require_once('../Core.php');
    (new Core())->handle();
c. Изменить содержимое полей  url в таблице products заменив и там html на php.
P.S.  По умолчанию проект рассчитан на то чтобы лежать в КОРНЕВОЙ папке диска.
Если это не так, то ссылки типа /»товар».html работать не станут. Надо еще будет впереди добавить папку проекта.



	Тест если задуматься не сложный. Никаких composer, bootstrap, symfony, doctrine.
Чистый html, php ,css,совсем немного PDO и jquery. Умение работать с файлами.
(и журналами) Готовых примеров в Internet полно. Код можно использовать даже из примеров в проекте.
	Короче, удачи.
